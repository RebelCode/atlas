<?php

namespace RebelCode\Atlas;

use RebelCode\Atlas\Expression\ExprInterface;
use RebelCode\Atlas\Expression\FnExpr;
use RebelCode\Atlas\Expression\Term;

/**
 * Helper class for easily creating unary expressions for SQL functions.
 *
 * STRING SQL FUNCTIONS
 * @method static ASCII()
 * @method static CHAR_LENGTH()
 * @method static CHARACTER_LENGTH()
 * @method static CONCAT()
 * @method static CONCAT_WS()
 * @method static FIELD()
 * @method static FIND_IN_SET()
 * @method static FORMAT()
 * @method static INSERT()
 * @method static INSTR()
 * @method static LCASE()
 * @method static LEFT()
 * @method static LENGTH()
 * @method static LOCATE()
 * @method static LOWER()
 * @method static LPAD()
 * @method static LTRIM()
 * @method static MAKE_SET()
 * @method static MID()
 * @method static OCT()
 * @method static OCTET_LENGTH()
 * @method static ORD()
 * @method static POSITION()
 * @method static QUOTE()
 * @method static REPEAT()
 * @method static REPLACE()
 * @method static REVERSE()
 * @method static RIGHT()
 * @method static RPAD()
 * @method static RTRIM()
 * @method static SOUNDEX()
 * @method static SPACE()
 * @method static STRCMP()
 * @method static SUBSTRING()
 * @method static SUBSTRING_INDEX()
 * @method static TRIM()
 * @method static UCASE()
 * @method static UPPER()
 *
 * INTEGER SQL FUNCTIONS
 * @method static ABS()
 * @method static ACOS()
 * @method static ASIN()
 * @method static ATAN()
 * @method static ATAN2()
 * @method static CEIL()
 * @method static CEILING()
 * @method static COS()
 * @method static COT()
 * @method static CRC32()
 * @method static COUNT()
 * @method static DEGREES()
 * @method static DIV()
 * @method static EXP()
 * @method static FLOOR()
 * @method static GREATEST()
 * @method static LEAST()
 * @method static LN()
 * @method static LOG()
 * @method static LOG10()
 * @method static LOG2()
 * @method static MAX()
 * @method static MIN()
 * @method static MOD()
 * @method static PI()
 * @method static POW()
 * @method static POWER()
 * @method static RADIANS()
 * @method static RAND()
 * @method static ROUND()
 * @method static SIGN()
 * @method static SIN()
 * @method static SQRT()
 * @method static SUM()
 * @method static TAN()
 * @method static TRUNCATE()
 *
 * DATE SQL FUNCTIONS
 * @method static ADDDATE()
 * @method static ADDTIME()
 * @method static CONVERT_TZ()
 * @method static CURDATE()
 * @method static CURRENT_DATE()
 * @method static CURRENT_TIME()
 * @method static CURRENT_TIMESTAMP()
 * @method static CURTIME()
 * @method static DATE()
 * @method static DATEDIFF()
 * @method static DATE_ADD()
 * @method static DATE_FORMAT()
 * @method static DATE_SUB()
 * @method static DAY()
 * @method static DAYNAME()
 * @method static DAYOFMONTH()
 * @method static DAYOFWEEK()
 * @method static DAYOFYEAR()
 * @method static EXTRACT()
 * @method static FROM_DAYS()
 * @method static FROM_UNIXTIME()
 * @method static GET_FORMAT()
 * @method static HOUR()
 * @method static LAST_DAY()
 * @method static LOCALTIME()
 * @method static LOCALTIMESTAMP()
 * @method static MAKEDATE()
 * @method static MAKETIME()
 * @method static MICROSECOND()
 * @method static MINUTE()
 * @method static MONTH()
 * @method static MONTHNAME()
 * @method static NOW()
 * @method static PERIOD_ADD()
 * @method static PERIOD_DIFF()
 * @method static QUARTER()
 * @method static SEC_TO_TIME()
 * @method static SECOND()
 * @method static STR_TO_DATE()
 * @method static SUBDATE()
 * @method static SUBTIME()
 * @method static SYSDATE()
 * @method static TIME()
 * @method static TIME_FORMAT()
 * @method static TIME_TO_SED()
 * @method static TIMEDIFF()
 * @method static TIMESTAMP()
 * @method static TO_DAYS()
 * @method static UNIX_TIMESTAMP()
 * @method static UTC_DATE()
 * @method static UTC_TIME()
 * @method static UTC_TIMESTAMP()
 * @method static WEEK()
 * @method static WEEKDAY()
 * @method static WEEKOFYEAR()
 * @method static YEAR()
 * @method static YEARWEEK()
 *
 * OTHER SQL FUNCTIONS
 * @method static BENCHMARK()
 * @method static BIN()
 * @method static BINARY()
 * @method static CASE()
 * @method static CAST()
 * @method static COALESCE()
 * @method static CONNECTION_ID()
 * @method static CONV()
 * @method static CONVERT()
 * @method static CURRENT_USER()
 * @method static DATABASE()
 * @method static FOUND_ROWS()
 * @method static IF()
 * @method static IFNULL()
 * @method static LAST_INSERT_ID()
 * @method static NULLIF()
 * @method static SESSION_USER()
 * @method static SYSTEM_USER()
 * @method static USER()
 * @method static VERSION()
 */
abstract class F
{
    /**
     * Creates a function expression.
     *
     * @param string $operator The called method name, which corresponds to the operator (a.k.a. function name).
     * @param list<mixed|ExprInterface> $arguments The call arguments.
     * @return FnExpr The created function expression.
     */
    public static function __callStatic(string $operator, array $arguments): FnExpr
    {
        return new FnExpr($operator, array_map([Term::class, 'create'], $arguments));
    }
}
